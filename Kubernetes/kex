#!/bin/bash

# sudo wget https://raw.githubusercontent.com/astbss/astbss/master/Kubernetes/kex -O /usr/local/bin/kex ; sudo chmod +x /usr/local/bin/kex

# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
# https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-autocomplete
# You can also enable kubernetes completion by adding this to your ~/.bashrc
# alias k=kubectl
# source <(kubectl completion bash)
# complete -F __start_kubectl k

# https://kubernetes.io/docs/reference/kubectl/cheatsheet/
# https://gist.github.com/tamas-molnar/32a07c0eb83e95484e3cdb4b7fada32b
# https://www.sfgroups.com/kubernetes/kubectl_bash_alias/
# https://itnext.io/kubernetes-command-line-tools-acad11683794


# set -xv
# set -ex
# set -e stops the execution of a script if a command or pipeline has an error
# set -v Echoes all commands before executing
# set -x 	Similar to -v, but expands commands
# https://www.tldp.org/LDP/abs/html/options.html

# Simple Login to Pod Bash Script
# cp kex /usr/local/bin/kex

P="$1"
D=""
NAMESP=""
T="ab-system"

if [ -z "$1" ] ; then
      echo "kubectl get pods"
      kubectl get pods
      exit
fi

if [ "$1"  == "-A" ] ; then
  NAMESP="-A"
  echo "kubectl get pods $NAMESP"
  kubectl get pods $NAMESP
  exit
fi

if [ "$1"  == "-n" ] ; then
  if [ -z "$2" ] ; then
        echo "ERROR: -n needs a namespace argument"
        exit
  fi
  NAMESP="-n $2"
  if [ -z "$3" ] ; then
        echo "kubectl get pods $NAMESP"
        kubectl get pods $NAMESP
        exit
  fi
  shift 2
  P="$1"
fi

if [ "$1"  == "-nab" ] ; then
  NAMESP="-n ab-system"
  if [ -z "$2" ] ; then
        echo "kubectl get pods $NAMESP"
        kubectl get pods $NAMESP
        exit
  fi
  shift 1
  P="$1"
fi


if [ ! -z "$2" ]
then
  D=$(kubectl get pods $NAMESP | grep $2 | cut -f1 -d' ')
  echo "*** Namespace: $NAMESP  1 is: $1 and 2 is: $2 - Found pod $D ***"
fi



case $P in
  (n|node|nodes)
    echo "kubectl get nodes"
    kubectl get nodes
    exit
  ;; # OK
esac

# https://kubernetes.io/docs/tasks/access-application-cluster/list-all-running-container-images/
case $P in
  (c|container|containers)
    kubectl get pods -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers [*]}{.name}{", "}{end}{end}'
    echo ""
    exit
  ;; # OK
esac

case $P in
  (p|pod|pods)
    kubectl get pods $NAMESP
    exit
  ;; # OK
esac


case $P in
  (Delete|delete)

    echo "kubectl delete pod $D $NAMESP"
    kubectl delete pod $D $NAMESP
    sleep 0.1
    kubectl get pods $NAMESP -o=wide
    exit
  ;; # OK
esac

case $P in
  (logs|log)
    echo "kubectl logs $D $NAMESP"
    kubectl logs $D $NAMESP --follow
    exit
  ;; # OK
esac

case $P in
  (dep|depl|deployment|deployments)
    echo "kubectl get deployments $NAMESP"
    kubectl get deployments $NAMESP
    exit
  ;; # OK
esac

case $P in
  (serv|service|services)
    echo "kubectl get services"
    kubectl get services $NAMESP
    exit
  ;; # OK
esac

case $P in
  (secret|secrets)
    echo "kubectl get secrets"
    kubectl get secrets $D $NAMESP
    exit
  ;; # OK
esac

case $P in
  (h|H|Help|help)
    echo "Usage: kex COMMAND [ARGS]... "
    echo ""
    echo "help  Show this message and exit."
    echo ""
    echo "Commands:"
    echo "  -A            kubectl get pods -A"
    echo "  -n namespace  kubectl get pods -n namespace"
    echo "  -nab          kubectl get pods -n ab-system"
    echo "  containers|c  get pods and all container names"
    echo "  pods|p        kubectl get pods"
    echo "  nodes|n       kubectl get nodes"
    echo "  dep           kubectl get deployments"
    echo "  deployments   kubectl get deployments"

    echo "  services|serv kubectl get services"
    echo "  secrets       kubectl get secrets"

    echo "  delete [pod]  kubectl delete pod"
    echo "  logs [pod] kubectl logs pod"
    exit
  ;; # OK
esac

if [ ! -z "$1" ] ; then
  D=$(kubectl get pods $NAMESP | grep $1 | cut -f1 -d' ')
  # echo "*** Namespace: $NAMESP  1 is: $1 and 2 is: $2 - Found pod $D ***"
fi

kubectl exec  "$D" -it $NAMESP -- bash -il
exit

if [ -n "$2" ] ; then
  kubectl exec  "$D" -it $NAMESP --container $2 -- bash -il
else
  kubectl exec  "$D" -it $NAMESP -- bash -il
fi

